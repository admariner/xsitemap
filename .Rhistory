urls[i, ]$lastmod <- xml_data[i]$url$lastmod
}
return(urls)
}
} else{
stop("Mal formatted url")
#return NA
}
test <- getXMLSitemap("https://www.gokam.fr/")
library(urltools)
test <- getXMLSitemap("https://www.gokam.fr/")
library(urltools)
library("xsitemap", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
test <- getXMLSitemap("http://www.cheeseboard.co.uk/")
?xsitemap
??xsitemap
test <- checkWordpressXMLSitemaps("http://www.cheeseboard.co.uk/")
View(test)
test <- checkWordpressXMLSitemaps("https://www.gokam.co.uk/")
View(test)
test <- checkWordpressXMLSitemaps("https://www.gokam.fr/")
test <- getXMLSitemap("https://www.greenpeace.fr/")
test <- getXMLSitemap("http://www.sylvainvandewalle.fr/")
urltocheck <- ""http://www.sylvainvandewalle.fr/sitemaps.xml
urltocheck <- "http://www.sylvainvandewalle.fr/sitemaps.xml""
urltocheck <- "http://www.sylvainvandewalle.fr/sitemaps.xml"
user_agent <-
"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"
request <- GET(urltocheck, user_agent(user_agent))
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
request <- GET(urltocheck, user_agent(user_agent))
request$status_code
xml_doc <- xmlParse(request, encoding = "UTF-8")
library("XML", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
xml_doc <- xmlParse(request, encoding = "UTF-8")
xml_data <- xmlToList(xml_doc)
View(xml_data)
lapply(xml_data, `[[`, 1)[1]
strsplit(toString(test_url), "\\.")
test_url <- lapply(xml_data, `[[`, 1)[1]
strsplit(toString(test_url), "\\.")
xml_data[i]$sitemap$loc
xml_data[0]$sitemap$loc
xml_data[0]
xml_data[1]$sitemap$loc
xml_data[2]$sitemap$loc
xml_data[3]$sitemap$loc
xml_data[4]$sitemap$loc
library(devtools)
install_github(“pixgarden/xsitemap”)
library(xsitemap)
install_github("pixgarden/xsitemap")
detach("package:xsitemap", unload=TRUE)
library("xsitemap", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
test <- getXMLSitemap("http://www.sylvainvandewalle.fr/")
individual_sitemap
xml_data[2]$sitemap$loc
individual_sitemap <-  xml_data[3]$sitemap$loc
individual_sitemap <-  xml_data[4]$sitemap$loc
is.na(individual_sitemap)
is.null(individual_sitemap)
install_github("pixgarden/xsitemap")
detach("package:xsitemap", unload=TRUE)
library("xsitemap", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
test <- getXMLSitemap("http://www.sylvainvandewalle.fr/")
View(test)
write.csv(test,"./sylvain.csv", row.names = FALSE)
write.csv(test,"../sylvain.csv", row.names = FALSE)
test <- getXMLSitemap("http://www.sylvainvandewalle.fr/")
install.packages("pixgarden/xsitemap")
library("xsitemap", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
test <- getXMLSitemap("http://www.sylvainvandewalle.fr/")
test2 <- getXMLSitemapHTTP(test)
?HEAD
curl_docs("CURLOPT_USERPWD")
readLines(curl("https://httpbin.org/redirect/3"))
httr_options()
library(httr)
httr_options()
what <- httr_options()
View(what)
test2 <- getXMLSitemapHTTP(test)
View(test)
head(http://www.sylvainvandewalle.fr/seo-hero/)
head("http://www.sylvainvandewalle.fr/seo-hero/")
toto <- head("http://www.sylvainvandewalle.fr/seo-hero/")
toto <- HEAD("http://www.sylvainvandewalle.fr/seo-hero/")
toto <- HEAD("http://www.sylvainvandewalle.fr/seo-hero/", CURLOPT_FOLLOWLOCATION = 0)
toto <- HEAD("http://www.sylvainvandewalle.fr/seo-hero/",  config(followlocation = 0))
View(toto)
toto$headers
toto$status_code
install.packages("pixgarden/xsitemap")
detach("package:xsitemap", unload=TRUE)
library(devtools)
detach("package:xsitemap", unload=TRUE)
install.packages("pixgarden/xsitemap")
library(devtools)
install_github("pixgarden/xsitemap")
library("xsitemap", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
test <- getXMLSitemap(“http://www.sylvainvandewalle.fr/“)
test <- getXMLSitemap("http://www.sylvainvandewalle.fr/")
test2 <- getXMLSitemapHTTP(test)
plot(test2)
esquisse::esquisser()
View(test2)
write.csv(test2,"../sylvain.csv")
pdf.options(width = 7, height = 5, family = "AvantGarde")
library(RColorBrewer)
library(animation)
install.packages("animation")
library(animation)
# title page
# pdf('titlepic.pdf', width=7, height=4)
ani.options(nmax = 66, interval = 0)
data(HuSpeech)
par(mar = c(4, 4, 0.1, 0.1))
FUN = function(..., dat = dat,
i = i, block = block) {
plot(..., x = i + 1:block, xlab = "paragraph index", ylim = range(dat),
ylab = sprintf("HuSpeech[%s:%s]", i + 1, i + block))
}
# Newton's method
# pdf('newton_method_succeed.pdf')
par(pch = 20, mar = c(4, 4, 3, 2))
ani.options(nmax = 50, interval = 1)
newton.method(function(x) 5 * x^3 - 7 * x^2 - 40 *
x + 100, 7.15, c(-6.2, 7.1))
# pdf('newton_method_fail.pdf')
# par(pch = 20,mar=c(4,4,3,2))
ani.options(interval = 0.5, nmax = 50)
xx = newton.method(function(x) atan(x), rg = c(-5,
5), init = 1.5)
xx$root
# quincunx demo
# pdf('quincunx.pdf')
set.seed(123)
ani.options(nmax = 200 + 15 - 2, interval = 0.03)
freq = quincunx(balls = 200, col.balls = sample(brewer.pal(9,
"Set1"), 200, TRUE))
# bootstrap
# pdf('boot_iid.pdf')
par(mar = c(1.5, 3, 1, 0.1), cex.lab = 0.8, cex.axis = 0.8,
mgp = c(2, 0.5, 0), tcl = -0.3)
ani.options(interval = 0, nmax = 40)
boot.iid(main = c("", ""))
# moving window
# pdf('mwar_ani.pdf')
ani.options(interval = 0, nmax = 50)
par(mar = c(2, 3, 1, 0.5), mgp = c(1.5, 0.5, 0))
mwar.ani(, pch = 21, col = "red", bg = "yellow", type = "o")
# HTML demo
ani.options(nmax = 100, interval = 0.1, ani.height = 500,
ani.width = 600, loop = FALSE, title = "Simulation of Buffon's Needle",
description = "There are three graphs made in each step: the top-left
one is a simulation of the scenario, the top-right one is to help us
understand the connection between dropping needles and the mathematical
method to estimate pi, and the bottom one is the result for each
dropping.")
ani.start()
par(mar = c(3, 2.5, 1, 0.2), pch = 20, mgp = c(1.5,
0.5, 0))
buffon.needle(type = "S")
ani.stop()
# SVGAnnotation is on Omegahat
# install.packages('SVGAnnotation', repos = 'http://www.omegahat.org/R')
library(SVGAnnotation)
# from example(animate)
p1 = matrix(c(2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5,
6, 6, 6), 5, , byrow = TRUE)
p2 = matrix(c(12, 2, 1, 10, 3, 1.2, 8, 4, 1.4, 6,
5, 1.5, 4, 6, 3), 5, , byrow = TRUE)
p3 = cbind(seq(4, 12, length = 5), rep(6, 5), c(1.5,
3, 5, 3, 1.5))
D = data.frame(rbind(p1, p2, p3))
names(D) = c("x", "y", "radius")
D$time = rep(1:5, 3)
D$id = rep(1:3, each = 5)
D = D[order(D$time), ]
pp = svgPlot({
plot(y ~ x, subset(D, time == 1), pch = 21, col = c("red",
"green", "blue"), bg = c("red", "green", "blue"), xlim = range(D$x),
ylim = range(D$y))
# Add horizontal and vertical lines at suitable positions.
abline(h = c(2, 4, 6), col = "lightgray", lty = 3)
abline(v = c(2, 7, 12), col = "lightgray", lty = 2)
})
animate(pp, D, "time", dropFirst = TRUE, labels = seq(2005,
length = 5), begin = 1, radii = "radius")
saveXML(pp, "gm1.svg")
??saveXML
library(XML)
install.packages(XML)
install.packages("XML")
install.packages(XML)
library(XML)
saveXML(pp, "gm1.svg")
library(xsitemap)
getXMLSitemap("https://www.gokam.co.uk/")
suggestqueries <- function (search_query){
query <- URLencode(search_query)
url <- paste0("http://suggestqueries.google.com/complete/search?output=toolbar&hl=en&q=",query)
# use GET method
req <- GET(url)
# extract xml
xml <- content(req)
# parse xml
doc <- xmlParse(xml)
# extract attributes from
# <CompleteSuggestion><suggestion data="XXXXXX"/></CompleteSuggestion>
list <- xpathSApply(doc, "//CompleteSuggestion/suggestion", xmlGetAttr, 'data')
# print results
return(list)
}
suggestqueries("Pour les anglais sont")
suggestqueries <- function (search_query){
packages <- c("XML", "httr")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
library(httr)
library(XML)
query <- URLencode(search_query)
url <- paste0("http://suggestqueries.google.com/complete/search?output=toolbar&hl=en&q=",query)
# use GET method
req <- GET(url)
# extract xml
xml <- content(req)
# parse xml
doc <- xmlParse(xml)
# extract attributes from
# <CompleteSuggestion><suggestion data="XXXXXX"/></CompleteSuggestion>
list <- xpathSApply(doc, "//CompleteSuggestion/suggestion", xmlGetAttr, 'data')
# print results
return(list)
}
suggestqueries("Pour les anglais sont")
query <- URLencode(search_query)
search_query <- 'comment faire pour'
packages <- c("XML", "httr")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
library(httr)
library(XML)
query <- URLencode(search_query)
url <- paste0("http://suggestqueries.google.com/complete/search?output=toolbar&hl=en&q=",query)
# use GET method
req <- GET(url)
# extract xml
xml <- content(req)
# parse xml
doc <- xmlParse(xml)
# extract attributes from
# <CompleteSuggestion><suggestion data="XXXXXX"/></CompleteSuggestion>
list <- xpathSApply(doc, "//CompleteSuggestion/suggestion", xmlGetAttr, 'data')
view(list)
View(list)
test <- suggestqueries("Pour les anglais sont")
View(test)
message(url)
message(req$status_code)
suggestqueries <- function (search_query){
packages <- c("XML", "httr")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
library(httr)
library(XML)
query <- URLencode(search_query)
url <- paste0("http://suggestqueries.google.com/complete/search?output=toolbar&hl=en&q=",query)
message(url)
# use GET method
req <- GET(url)
# extract xml
message(req$status_code)
xml <- content(req)
# parse xml
doc <- xmlParse(xml)
# extract attributes from
# <CompleteSuggestion><suggestion data="XXXXXX"/></CompleteSuggestion>
list <- xpathSApply(doc, "//CompleteSuggestion/suggestion", xmlGetAttr, 'data')
print results
print(list)
return(list)
}
#print results
print(list)
suggestqueries <- function (search_query){
packages <- c("XML", "httr")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
library(httr)
library(XML)
query <- URLencode(search_query)
url <- paste0("http://suggestqueries.google.com/complete/search?output=toolbar&hl=en&q=",query)
message(url)
# use GET method
req <- GET(url)
# extract xml
message(req$status_code)
xml <- content(req)
# parse xml
doc <- xmlParse(xml)
# extract attributes from
# <CompleteSuggestion><suggestion data="XXXXXX"/></CompleteSuggestion>
list <- xpathSApply(doc, "//CompleteSuggestion/suggestion", xmlGetAttr, 'data')
#print results
print(list)
return(list)
}
test <- suggestqueries("Pour les anglais sont")
packages <- c("XML", "httr")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
library(httr)
library(XML)
query <- URLencode(search_query)
url <- paste0("http://suggestqueries.google.com/complete/search?output=toolbar&hl=en&q=",query)
message(url)
# use GET method
req <- GET(url)
message(req$status_code)
xml <- content(req)
View(xml)
# parse xml
doc <- xmlParse(xml)
xml <- content(req)
# parse xml
doc <- xmlParse(xml)
# extract attributes from
# <CompleteSuggestion><suggestion data="XXXXXX"/></CompleteSuggestion>
list <- xpathSApply(doc, "//CompleteSuggestion/suggestion", xmlGetAttr, 'data')
#print results
print(list)
`eturn(list)
return(list)
suggestqueries <- function (search_query){
packages <- c("XML", "httr")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
library(httr)
library(XML)
query <- URLencode(search_query)
url <- paste0("http://suggestqueries.google.com/complete/search?output=toolbar&hl=en&q=",query)
message(url)
# use GET method
req <- GET(url)
# extract xml
message(req$status_code)
xml <- content(req)
# parse xml
doc <- xmlParse(xml)
# extract attributes from
# <CompleteSuggestion><suggestion data="XXXXXX"/></CompleteSuggestion>
list <- xpathSApply(doc, "//CompleteSuggestion/suggestion", xmlGetAttr, 'data')
#print results
print(list)
return(list)
}
test <- suggestqueries("Comment font les anglais pour")
print("test")
test <- suggestqueries("Comment font les anglais pour")
search_query <- "Comment font les anglais pour"
query <- URLencode(search_query)
url <- paste0("http://suggestqueries.google.com/complete/search?output=toolbar&hl=en&q=",query)
message(url)
# use GET method
req <- GET(url)
message(req$status_code)
xml <- content(req)
# parse xml
doc <- xmlParse(xml)
# extract attributes from
# <CompleteSuggestion><suggestion data="XXXXXX"/></CompleteSuggestion>
list <- xpathSApply(doc, "//CompleteSuggestion/suggestion", xmlGetAttr, 'data')
#print results
print(list)
return(list)
search_query <- "How to become a"
test <- suggestqueries("How to become a")
suggestqueries <- function (search_query, code_lang){
packages <- c("XML", "httr")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
library(httr)
library(XML)
query <- URLencode(search_query)
url <- paste0("http://suggestqueries.google.com/complete/search?output=toolbar&hl="&code_lang&"&q=",query)
message(url)
# use GET method
req <- GET(url)
# extract xml
message(req$status_code)
xml <- content(req)
# parse xml
doc <- xmlParse(xml)
# extract attributes from
# <CompleteSuggestion><suggestion data="XXXXXX"/></CompleteSuggestion>
list <- xpathSApply(doc, "//CompleteSuggestion/suggestion", xmlGetAttr, 'data')
#print results
print(list)
return(list)
}
test <- suggestqueries("Comment devenir un ", "fr")
suggestqueries <- function (search_query, code_lang){
packages <- c("XML", "httr")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
library(httr)
library(XML)
query <- URLencode(search_query)
url <- paste0("http://suggestqueries.google.com/complete/search?output=toolbar&hl=",code_lang,"&q=",query)
message(url)
# use GET method
req <- GET(url)
# extract xml
message(req$status_code)
xml <- content(req)
# parse xml
doc <- xmlParse(xml)
# extract attributes from
# <CompleteSuggestion><suggestion data="XXXXXX"/></CompleteSuggestion>
list <- xpathSApply(doc, "//CompleteSuggestion/suggestion", xmlGetAttr, 'data')
#print results
print(list)
return(list)
}
test <- suggestqueries("Comment devenir un ", "fr")
letters <- [a:z]
letters <- c(a:z)
letters
sample(1:10, 1)
list
class(test)
test
test_a <- suggestqueries("Comment devenir un a", "fr")
test_a <- suggestqueries("Comment devenir un aa", "fr")
test_a <- suggestqueries("Comment devenir un aaa", "fr")
test_a <- suggestqueries("Comment devenir un b", "fr")
test <- getXMLSitemap("http://www.sylvainvandewalle.fr")
test2 <- getXMLSitemapHTTP(test)
library(plotluck)
install.packages("plotluck")
library(plotluck)
plotluck(test2, test2$http~test2$origin|test2$loc)
plotluck(test2, test2$http~test2$origin)
plotluck(test2, test2$http|test2$origin)
plotluck(test2, test2$http)
plotluck(test2)
?plotluck
plotluck(test2,.~1)
plotluck(test2,test2$http~.)
plotluck(test2,test2['http']~.)
plotluck(test2,http~.)
plotluck(test2,http~origin)
plotluck(test2,http~origin, weights=loc)
plotluck(test2,http~origin, weights=count(loc))
plotluck(test2,http~origin, weights=origin)
plotluck(test2,http~loc, weights=origin)
plotluck(test2,http~origin, weights=.)
plotluck(test2)
plotluck(test2,test2$origin)
plotluck(test2,.~origin)
plotluck(test2,.~.)
plotluck(test2,.~1)
plotluck(test2,http~1)
plotluck(test2,http~1,weights = origin)
plotluck(test2,http~1,weights = 1)
plotluck(test2,http~1,weights = .)
plotluck(test2,http~1,weights = 1)
plotluck(test2,http~1,weights = 2)
plotluck(test2,http~1,weights = http)
plotluck(test2,origin~1,weights = http)
test <- getXMLSitemap("https://www.habito.com/")
test <- getXMLSitemap("https://arthur.camberlein.fr/")
test <- getXMLSitemap("https://www.gokam.co.uk")
test <- getXMLSitemap("https://www.manontaillefer.com/")
test2 <- getXMLSitemapHTTP(test)
View(test)
View(test2)
library(xsitemap)
test <- getXMLSitemap("https://www.vanishingincmagic.com/")
test <- getXMLSitemap("https://www.gov.uk/")
View(test)
length(test)
head(test)
tail(test)
nrow(test)
test2 <- getXMLSitemapHTTP(test)
test <- getXMLSitemap("https://www.hsbc.co.uk/)
""
'
qqq
=;
@
test <- getXMLSitemap("https://www.hsbc.co.uk/)
clearPushBack()
test_hsbc <- getXMLSitemap("https://www.hsbc.co.uk/")
govuk_sitemap <- getXMLSitemap("https://www.gov.uk/")
govuk_sitemap <- getXMLSitemap("https://www.ruedesplaques.com/")
View(govuk_sitemap)
govuk_sitemap <- getXMLSitemap("https://www.ruedesplaques.com/")
View(govuk_sitemap)
govuk_sitemap <- getXMLSitemap("http://www.richmondroadmedicalcentre.nhs.uk/")
sitemap <- getXMLSitemap("http://www.richmondroadmedicalcentre.nhs.uk/")
View(test)
